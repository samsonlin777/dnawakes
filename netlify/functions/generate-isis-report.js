const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');

// ‰ΩøÁî® DouCoachSystem ÁöÑ Supabase ÈÄ£Á∑ö
const supabaseUrl = 'https://urryrxlzyepwklzwwxwa.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

exports.handler = async (event, context) => {
    console.log('üî• Isis Report Generator Started');
    
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };

    // Handle preflight requests
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ 
                success: false, 
                error: 'Method not allowed' 
            })
        };
    }

    try {
        const { student, reportContent, password } = JSON.parse(event.body);
        
        console.log('üìã Processing report for:', student.name);

        // È©óË≠âÂøÖË¶ÅË≥áÊñô
        if (!student || !reportContent || !password) {
            throw new Error('Missing required data');
        }

        // ÁîüÊàê PDF Â†±Âëä
        const pdfBase64 = await generatePDF(student, reportContent, password);
        
        // Ëß∏Áôº n8n webhook ÁôºÈÄÅÈÉµ‰ª∂
        await triggerN8nWebhook({
            orderNumber: student.orderNumber,
            studentName: student.name,
            studentEmail: student.email,
            planType: student.plan,
            pdfBase64: pdfBase64,
            password: password,
            reportDate: new Date().toISOString()
        });

        // Êõ¥Êñ∞Â†±ÂëäÁãÄÊÖãÁÇ∫Â∑≤ÁôºÈÄÅ
        await updateReportStatus(student.orderNumber, 'sent');

        // Ë®òÈåÑÂà∞Ë≥áÊñôÂ∫´ (ÂèØÈÅ∏)
        await logReportGeneration(student, reportContent);

        console.log('‚úÖ Report generated and sent successfully');

        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                success: true,
                message: 'PDFÂ†±ÂëäÂ∑≤ÁîüÊàê‰∏¶ÁôºÈÄÅ',
                orderNumber: student.orderNumber
            })
        };

    } catch (error) {
        console.error('‚ùå Error generating report:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                success: false,
                error: error.message || 'Internal server error'
            })
        };
    }
};

// ÁîüÊàê PDF ÂáΩÊï∏
async function generatePDF(student, reportContent, password) {
    const PDFDocument = require('pdfkit');
    
    return new Promise((resolve, reject) => {
        try {
            console.log('üìÑ Generating PDF for:', student.name);
            
            // ÂâµÂª∫ PDF ÊñáÊ™î
            const doc = new PDFDocument({
                size: 'A4',
                margins: { top: 50, bottom: 50, left: 50, right: 50 },
                info: {
                    Title: `Isis DNAË¶∫ÈÜíÂ†±Âëä - ${student.name}`,
                    Author: 'Isis Â•≥Á•û',
                    Subject: 'DNAË≤°ÂØåË¶∫ÈÜíÂ†±Âëä',
                    Creator: 'Isis DNAË¶∫ÈÜíÁ≥ªÁµ±'
                }
                // Note: ÂØÜÁ¢º‰øùË≠∑ÂäüËÉΩÂú® Netlify Functions ‰∏≠ÂèØËÉΩ‰∏çÊîØÊè¥ÔºåÂÖàÁßªÈô§
            });

            const chunks = [];
            
            doc.on('data', chunk => chunks.push(chunk));
            doc.on('end', () => {
                const pdfBuffer = Buffer.concat(chunks);
                const pdfBase64 = pdfBuffer.toString('base64');
                resolve(pdfBase64);
            });

            // PDF Ê®£ÂºèË®≠ÂÆö
            const primaryColor = '#4A148C';
            const goldColor = '#FFD700';
            const textColor = '#333333';

            // Ê®ôÈ°åÈ†Å - ‰ΩøÁî®Á≥ªÁµ±È†êË®≠Â≠óÈ´î
            doc.fontSize(28)
               .fillColor(primaryColor)
               .text('‚ú® Isis DNAË¶∫ÈÜí ‚ú®', { align: 'center' });

            doc.moveDown();
            doc.fontSize(22)
               .fillColor(goldColor)
               .text('Ë≤°ÂØåDNAÁ∑®Á¢ºÂ†±Âëä', { align: 'center' });

            doc.moveDown(2);

            // Â≠∏Âì°Ë≥áË®äÊ°Ü
            const infoBoxY = doc.y;
            doc.rect(50, infoBoxY, 495, 120)
               .fillAndStroke('#f8f9fa', '#ddd');

            doc.fontSize(16)
               .fillColor(textColor)
               .text('üë§ Â≠∏Âì°Ë≥áË®ä', 70, infoBoxY + 20);

            doc.fontSize(12)
               .text(`ÂßìÂêçÔºö${student.name}`, 70, infoBoxY + 50)
               .text(`ÊñπÊ°àÔºö${student.plan}`, 70, infoBoxY + 70)
               .text(`ÁîüÊàêÊó•ÊúüÔºö${new Date().toLocaleDateString('zh-TW')}`, 70, infoBoxY + 90);

            // ÊµÆÊ∞¥Âç∞ - Â≠∏Âì°ÂßìÂêç
            doc.fontSize(60)
               .fillColor('#f0f0f0')
               .text(student.name, 0, 400, {
                   align: 'center',
                   opacity: 0.1
               });

            // Êñ∞È†ÅÈù¢ÈñãÂßãÂ†±ÂëäÂÖßÂÆπ
            doc.addPage();

            // Â†±ÂëäÂÖßÂÆπÊ®ôÈ°å
            doc.fontSize(20)
               .fillColor(primaryColor)
               .text('üåü ÊÇ®Â∞àÂ±¨ÁöÑË≤°ÂØåDNAÂ†±Âëä', { align: 'center' });

            doc.moveDown(2);

            // ËôïÁêÜÂ†±ÂëäÂÖßÂÆπ
            const sections = reportContent.split('========================');
            
            sections.forEach((section, index) => {
                if (section.trim()) {
                    const lines = section.trim().split('\n');
                    const title = lines[0];
                    const content = lines.slice(1).join('\n').trim();

                    if (title && content) {
                        // Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÊñ∞È†ÅÈù¢
                        if (doc.y > 700) {
                            doc.addPage();
                        }

                        // Á´†ÁØÄÊ®ôÈ°å
                        doc.fontSize(16)
                           .fillColor(goldColor)
                           .text(title, { align: 'left' });

                        doc.moveDown(0.5);

                        // Á´†ÁØÄÂÖßÂÆπ
                        doc.fontSize(11)
                           .fillColor(textColor)
                           .text(content, {
                               align: 'justify',
                               lineGap: 3
                           });

                        doc.moveDown(1.5);
                    }
                }
            });

            // È†ÅËÖ≥
            const pageCount = doc.bufferedPageRange().count;
            for (let i = 0; i < pageCount; i++) {
                doc.switchToPage(i);
                
                // È†ÅÁ¢º
                doc.fontSize(10)
                   .fillColor('#666')
                   .text(`Á¨¨ ${i + 1} È†ÅÔºåÂÖ± ${pageCount} È†Å`, 
                          50, doc.page.height - 30, 
                          { align: 'center' });

                // ÁâàÊ¨äË≥áË®ä
                if (i === 0) {
                    doc.text('¬© 2025 Isis Â•≥Á•û - Ê≠§Â†±ÂëäÁÇ∫ÂÄã‰∫∫Â∞àÂ±¨ÔºåË´ãÂãøÂàÜ‰∫´',
                             50, doc.page.height - 50,
                             { align: 'center' });
                }
            }

            doc.end();

        } catch (error) {
            console.error('PDF generation error:', error);
            reject(error);
        }
    });
}

// Ëß∏Áôº n8n webhook
async function triggerN8nWebhook(data) {
    const webhookUrl = process.env.N8N_WEBHOOK_URL || 'https://n8n-samson-lin-u44764.vm.elestio.app/webhook/send-isis-report-email';
    
    console.log('üìß Triggering n8n webhook for email sending');
    
    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`n8n webhook failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ n8n webhook triggered successfully');
        return result;

    } catch (error) {
        console.error('‚ùå n8n webhook error:', error);
        throw error;
    }
}

// Êõ¥Êñ∞Â†±ÂëäÁãÄÊÖã
async function updateReportStatus(orderNumber, status) {
    try {
        console.log(`üìù Updating report status for order ${orderNumber} to ${status}`);
        
        const { data, error } = await supabase
            .rpc('dnawakes_update_report_status', {
                p_order_number: orderNumber,
                p_status: status
            });

        if (error) {
            console.error('‚ùå Error updating report status:', error);
            // ‰∏çÊããÂá∫ÈåØË™§ÔºåÂõ†ÁÇ∫ÈÄô‰∏çÊòØÈóúÈçµÂäüËÉΩ
        } else {
            console.log('‚úÖ Report status updated successfully');
        }
    } catch (error) {
        console.error('‚ùå Error updating report status:', error);
    }
}

// Ë®òÈåÑÂ†±ÂëäÁîüÊàê
async function logReportGeneration(student, reportContent) {
    try {
        const { data, error } = await supabase
            .from('isis_report_logs')
            .insert([
                {
                    order_number: student.orderNumber,
                    student_name: student.name,
                    student_email: student.email,
                    plan_type: student.plan,
                    report_content_length: reportContent.length,
                    generated_at: new Date().toISOString(),
                    status: 'completed'
                }
            ]);

        if (error) {
            console.error('Database logging error:', error);
            // ‰∏çÊããÂá∫ÈåØË™§ÔºåÂõ†ÁÇ∫ÈÄô‰∏çÊòØÈóúÈçµÂäüËÉΩ
        } else {
            console.log('üìù Report generation logged to database');
        }
    } catch (error) {
        console.error('Database logging error:', error);
    }
}